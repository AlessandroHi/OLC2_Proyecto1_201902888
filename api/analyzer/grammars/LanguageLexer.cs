//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./grammars/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, EMBEDDED=50, INT=51, BOOL=52, 
		FLOAT=53, STRING=54, RUNE=55, Nil=56, ID=57, WS=58, LINE_COMMENT=59, BLOCK_COMMENT=60;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
		"T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
		"EMBEDDED", "INT", "BOOL", "FLOAT", "STRING", "RUNE", "Nil", "ID", "WS", 
		"LINE_COMMENT", "BLOCK_COMMENT"
	};


	public LanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "';'", "':='", "'['", "']'", "'{'", "'}'", "','", 
		"'func'", "'('", "')'", "'type'", "'struct'", "'if'", "'else'", "'switch'", 
		"'for'", "'range'", "'break'", "'continue'", "'return'", "'case'", "':'", 
		"'default'", "'-'", "'*'", "'/'", "'%'", "'+'", "'>'", "'<'", "'>='", 
		"'<='", "'=='", "'!='", "'&&'", "'||'", "'!'", "'+='", "'-='", "'++'", 
		"'--'", "'.'", "'int'", "'float64'", "'string'", "'bool'", "'rune'", null, 
		null, null, null, null, null, "'nil'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "EMBEDDED", "INT", "BOOL", "FLOAT", "STRING", "RUNE", "Nil", 
		"ID", "WS", "LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,60,391,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,
		1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
		10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
		19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,
		24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
		28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,
		34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,
		39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,
		44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,
		46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,
		48,1,49,1,49,1,49,1,49,1,50,4,50,308,8,50,11,50,12,50,309,1,51,1,51,1,
		51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,321,8,51,1,52,4,52,324,8,52,11,52,
		12,52,325,1,52,1,52,4,52,330,8,52,11,52,12,52,331,1,53,1,53,1,53,1,53,
		5,53,338,8,53,10,53,12,53,341,9,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,
		1,55,1,55,1,55,1,56,1,56,5,56,355,8,56,10,56,12,56,358,9,56,1,57,4,57,
		361,8,57,11,57,12,57,362,1,57,1,57,1,58,1,58,1,58,1,58,5,58,371,8,58,10,
		58,12,58,374,9,58,1,58,1,58,1,59,1,59,1,59,1,59,5,59,382,8,59,10,59,12,
		59,385,9,59,1,59,1,59,1,59,1,59,1,59,1,383,0,60,1,1,3,2,5,3,7,4,9,5,11,
		6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
		37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
		61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
		85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
		54,109,55,111,56,113,57,115,58,117,59,119,60,1,0,6,1,0,48,57,1,0,34,34,
		3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,
		32,2,0,10,10,13,13,400,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
		0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
		0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
		0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
		0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
		1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
		0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,
		0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
		0,117,1,0,0,0,0,119,1,0,0,0,1,121,1,0,0,0,3,125,1,0,0,0,5,127,1,0,0,0,
		7,129,1,0,0,0,9,132,1,0,0,0,11,134,1,0,0,0,13,136,1,0,0,0,15,138,1,0,0,
		0,17,140,1,0,0,0,19,142,1,0,0,0,21,147,1,0,0,0,23,149,1,0,0,0,25,151,1,
		0,0,0,27,156,1,0,0,0,29,163,1,0,0,0,31,166,1,0,0,0,33,171,1,0,0,0,35,178,
		1,0,0,0,37,182,1,0,0,0,39,188,1,0,0,0,41,194,1,0,0,0,43,203,1,0,0,0,45,
		210,1,0,0,0,47,215,1,0,0,0,49,217,1,0,0,0,51,225,1,0,0,0,53,227,1,0,0,
		0,55,229,1,0,0,0,57,231,1,0,0,0,59,233,1,0,0,0,61,235,1,0,0,0,63,237,1,
		0,0,0,65,239,1,0,0,0,67,242,1,0,0,0,69,245,1,0,0,0,71,248,1,0,0,0,73,251,
		1,0,0,0,75,254,1,0,0,0,77,257,1,0,0,0,79,259,1,0,0,0,81,262,1,0,0,0,83,
		265,1,0,0,0,85,268,1,0,0,0,87,271,1,0,0,0,89,273,1,0,0,0,91,277,1,0,0,
		0,93,285,1,0,0,0,95,292,1,0,0,0,97,297,1,0,0,0,99,302,1,0,0,0,101,307,
		1,0,0,0,103,320,1,0,0,0,105,323,1,0,0,0,107,333,1,0,0,0,109,344,1,0,0,
		0,111,348,1,0,0,0,113,352,1,0,0,0,115,360,1,0,0,0,117,366,1,0,0,0,119,
		377,1,0,0,0,121,122,5,118,0,0,122,123,5,97,0,0,123,124,5,114,0,0,124,2,
		1,0,0,0,125,126,5,61,0,0,126,4,1,0,0,0,127,128,5,59,0,0,128,6,1,0,0,0,
		129,130,5,58,0,0,130,131,5,61,0,0,131,8,1,0,0,0,132,133,5,91,0,0,133,10,
		1,0,0,0,134,135,5,93,0,0,135,12,1,0,0,0,136,137,5,123,0,0,137,14,1,0,0,
		0,138,139,5,125,0,0,139,16,1,0,0,0,140,141,5,44,0,0,141,18,1,0,0,0,142,
		143,5,102,0,0,143,144,5,117,0,0,144,145,5,110,0,0,145,146,5,99,0,0,146,
		20,1,0,0,0,147,148,5,40,0,0,148,22,1,0,0,0,149,150,5,41,0,0,150,24,1,0,
		0,0,151,152,5,116,0,0,152,153,5,121,0,0,153,154,5,112,0,0,154,155,5,101,
		0,0,155,26,1,0,0,0,156,157,5,115,0,0,157,158,5,116,0,0,158,159,5,114,0,
		0,159,160,5,117,0,0,160,161,5,99,0,0,161,162,5,116,0,0,162,28,1,0,0,0,
		163,164,5,105,0,0,164,165,5,102,0,0,165,30,1,0,0,0,166,167,5,101,0,0,167,
		168,5,108,0,0,168,169,5,115,0,0,169,170,5,101,0,0,170,32,1,0,0,0,171,172,
		5,115,0,0,172,173,5,119,0,0,173,174,5,105,0,0,174,175,5,116,0,0,175,176,
		5,99,0,0,176,177,5,104,0,0,177,34,1,0,0,0,178,179,5,102,0,0,179,180,5,
		111,0,0,180,181,5,114,0,0,181,36,1,0,0,0,182,183,5,114,0,0,183,184,5,97,
		0,0,184,185,5,110,0,0,185,186,5,103,0,0,186,187,5,101,0,0,187,38,1,0,0,
		0,188,189,5,98,0,0,189,190,5,114,0,0,190,191,5,101,0,0,191,192,5,97,0,
		0,192,193,5,107,0,0,193,40,1,0,0,0,194,195,5,99,0,0,195,196,5,111,0,0,
		196,197,5,110,0,0,197,198,5,116,0,0,198,199,5,105,0,0,199,200,5,110,0,
		0,200,201,5,117,0,0,201,202,5,101,0,0,202,42,1,0,0,0,203,204,5,114,0,0,
		204,205,5,101,0,0,205,206,5,116,0,0,206,207,5,117,0,0,207,208,5,114,0,
		0,208,209,5,110,0,0,209,44,1,0,0,0,210,211,5,99,0,0,211,212,5,97,0,0,212,
		213,5,115,0,0,213,214,5,101,0,0,214,46,1,0,0,0,215,216,5,58,0,0,216,48,
		1,0,0,0,217,218,5,100,0,0,218,219,5,101,0,0,219,220,5,102,0,0,220,221,
		5,97,0,0,221,222,5,117,0,0,222,223,5,108,0,0,223,224,5,116,0,0,224,50,
		1,0,0,0,225,226,5,45,0,0,226,52,1,0,0,0,227,228,5,42,0,0,228,54,1,0,0,
		0,229,230,5,47,0,0,230,56,1,0,0,0,231,232,5,37,0,0,232,58,1,0,0,0,233,
		234,5,43,0,0,234,60,1,0,0,0,235,236,5,62,0,0,236,62,1,0,0,0,237,238,5,
		60,0,0,238,64,1,0,0,0,239,240,5,62,0,0,240,241,5,61,0,0,241,66,1,0,0,0,
		242,243,5,60,0,0,243,244,5,61,0,0,244,68,1,0,0,0,245,246,5,61,0,0,246,
		247,5,61,0,0,247,70,1,0,0,0,248,249,5,33,0,0,249,250,5,61,0,0,250,72,1,
		0,0,0,251,252,5,38,0,0,252,253,5,38,0,0,253,74,1,0,0,0,254,255,5,124,0,
		0,255,256,5,124,0,0,256,76,1,0,0,0,257,258,5,33,0,0,258,78,1,0,0,0,259,
		260,5,43,0,0,260,261,5,61,0,0,261,80,1,0,0,0,262,263,5,45,0,0,263,264,
		5,61,0,0,264,82,1,0,0,0,265,266,5,43,0,0,266,267,5,43,0,0,267,84,1,0,0,
		0,268,269,5,45,0,0,269,270,5,45,0,0,270,86,1,0,0,0,271,272,5,46,0,0,272,
		88,1,0,0,0,273,274,5,105,0,0,274,275,5,110,0,0,275,276,5,116,0,0,276,90,
		1,0,0,0,277,278,5,102,0,0,278,279,5,108,0,0,279,280,5,111,0,0,280,281,
		5,97,0,0,281,282,5,116,0,0,282,283,5,54,0,0,283,284,5,52,0,0,284,92,1,
		0,0,0,285,286,5,115,0,0,286,287,5,116,0,0,287,288,5,114,0,0,288,289,5,
		105,0,0,289,290,5,110,0,0,290,291,5,103,0,0,291,94,1,0,0,0,292,293,5,98,
		0,0,293,294,5,111,0,0,294,295,5,111,0,0,295,296,5,108,0,0,296,96,1,0,0,
		0,297,298,5,114,0,0,298,299,5,117,0,0,299,300,5,110,0,0,300,301,5,101,
		0,0,301,98,1,0,0,0,302,303,3,113,56,0,303,304,5,46,0,0,304,305,3,113,56,
		0,305,100,1,0,0,0,306,308,7,0,0,0,307,306,1,0,0,0,308,309,1,0,0,0,309,
		307,1,0,0,0,309,310,1,0,0,0,310,102,1,0,0,0,311,312,5,116,0,0,312,313,
		5,114,0,0,313,314,5,117,0,0,314,321,5,101,0,0,315,316,5,102,0,0,316,317,
		5,97,0,0,317,318,5,108,0,0,318,319,5,115,0,0,319,321,5,101,0,0,320,311,
		1,0,0,0,320,315,1,0,0,0,321,104,1,0,0,0,322,324,7,0,0,0,323,322,1,0,0,
		0,324,325,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,
		329,5,46,0,0,328,330,7,0,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,
		0,0,0,331,332,1,0,0,0,332,106,1,0,0,0,333,339,5,34,0,0,334,335,5,92,0,
		0,335,338,5,34,0,0,336,338,8,1,0,0,337,334,1,0,0,0,337,336,1,0,0,0,338,
		341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,339,1,
		0,0,0,342,343,5,34,0,0,343,108,1,0,0,0,344,345,5,39,0,0,345,346,9,0,0,
		0,346,347,5,39,0,0,347,110,1,0,0,0,348,349,5,110,0,0,349,350,5,105,0,0,
		350,351,5,108,0,0,351,112,1,0,0,0,352,356,7,2,0,0,353,355,7,3,0,0,354,
		353,1,0,0,0,355,358,1,0,0,0,356,354,1,0,0,0,356,357,1,0,0,0,357,114,1,
		0,0,0,358,356,1,0,0,0,359,361,7,4,0,0,360,359,1,0,0,0,361,362,1,0,0,0,
		362,360,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,365,6,57,0,0,365,116,
		1,0,0,0,366,367,5,47,0,0,367,368,5,47,0,0,368,372,1,0,0,0,369,371,8,5,
		0,0,370,369,1,0,0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,
		375,1,0,0,0,374,372,1,0,0,0,375,376,6,58,0,0,376,118,1,0,0,0,377,378,5,
		47,0,0,378,379,5,42,0,0,379,383,1,0,0,0,380,382,9,0,0,0,381,380,1,0,0,
		0,382,385,1,0,0,0,383,384,1,0,0,0,383,381,1,0,0,0,384,386,1,0,0,0,385,
		383,1,0,0,0,386,387,5,42,0,0,387,388,5,47,0,0,388,389,1,0,0,0,389,390,
		6,59,0,0,390,120,1,0,0,0,11,0,309,320,325,331,337,339,356,362,372,383,
		1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
